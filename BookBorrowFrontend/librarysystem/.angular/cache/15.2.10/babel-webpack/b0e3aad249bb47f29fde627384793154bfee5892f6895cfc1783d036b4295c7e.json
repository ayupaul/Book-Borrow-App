{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.BackendUrl = \"http://localhost:5030/api/User\";\n  }\n  //login\n  login(userDetails) {\n    return this.http.post(`${this.BackendUrl}/login`, userDetails);\n  }\n  //get user by id\n  getUserById(id) {\n    return this.http.get(`${this.BackendUrl}/getUserById/${id}`);\n  }\n  // is logged in or not\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  //get available token\n  getAvailableToken(id) {\n    return this.http.get(`${this.BackendUrl}/getAvailableToken/${id}`);\n  }\n  //store token\n  storeToken(tokenValue) {\n    localStorage.setItem('token', tokenValue);\n  }\n  //get token\n  getToken() {\n    const token = localStorage.getItem('token');\n    return token;\n  }\n  //decode token\n  decodedToken() {\n    const jwtHelper = new JwtHelperService();\n    const token = this.getToken() ?? '';\n    return jwtHelper.decodeToken(token);\n  }\n  getUsernameFromToken() {\n    const userToken = this.decodedToken();\n    if (userToken) {\n      const username = userToken.name;\n      return username;\n    }\n    return \"\";\n  }\n  getAvailableTokenFromToken(localToken) {\n    const userToken = this.decodedToken();\n    if (userToken) {\n      if (localToken) {}\n      const avaiableToken = userToken.TokenAvailable;\n      console.log(avaiableToken);\n      return avaiableToken;\n    }\n    return \"\";\n  }\n  getUserIdFromToken() {\n    const userToken = this.decodedToken();\n    if (userToken) {\n      return userToken.UserId;\n    }\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,gBAAgB,QAAQ,oBAAoB;;;AAMrD,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IADxB,eAAU,GAAQ,gCAAgC;EACX;EAEvC;EACAC,KAAK,CAACC,WAAe;IACnB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,UAAU,QAAQ,EAACF,WAAW,CAAC;EAC/D;EAEA;EACAG,WAAW,CAACC,EAAM;IAChB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACH,UAAU,gBAAgBE,EAAE,EAAE,CAAC;EAC9D;EACA;EACAE,UAAU;IACR,OAAO,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxC;EACA;EACAC,iBAAiB,CAACL,EAAM;IACtB,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAAC,GAAG,IAAI,CAACH,UAAU,sBAAsBE,EAAE,EAAE,CAAC;EACpE;EAEA;EACAM,UAAU,CAACC,UAAc;IAEvBJ,YAAY,CAACK,OAAO,CAAC,OAAO,EAACD,UAAU,CAAC;EAC1C;EAEA;EACAE,QAAQ;IACN,MAAMC,KAAK,GAACP,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,OAAOM,KAAK;EACd;EACA;EACAC,YAAY;IACV,MAAMC,SAAS,GAAC,IAAIrB,gBAAgB,EAAE;IACtC,MAAMmB,KAAK,GAAC,IAAI,CAACD,QAAQ,EAAE,IAAI,EAAE;IACjC,OAAOG,SAAS,CAACC,WAAW,CAACH,KAAK,CAAC;EACrC;EACAI,oBAAoB;IAClB,MAAMC,SAAS,GAAC,IAAI,CAACJ,YAAY,EAAE;IACnC,IAAGI,SAAS,EAAC;MACX,MAAMC,QAAQ,GAACD,SAAS,CAACE,IAAI;MAC7B,OAAOD,QAAQ;;IAEjB,OAAO,EAAE;EACX;EACAE,0BAA0B,CAACC,UAAc;IACvC,MAAMJ,SAAS,GAAC,IAAI,CAACJ,YAAY,EAAE;IACnC,IAAGI,SAAS,EAAC;MACX,IAAGI,UAAU,EAAC;MAGd,MAAMC,aAAa,GAACL,SAAS,CAACM,cAAc;MAC5CC,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;MAC1B,OAAOA,aAAa;;IAEtB,OAAO,EAAE;EACX;EACAI,kBAAkB;IAChB,MAAMT,SAAS,GAAC,IAAI,CAACJ,YAAY,EAAE;IACnC,IAAGI,SAAS,EAAC;MACX,OAAOA,SAAS,CAACU,MAAM;;EAE3B;EAAC;qBAhEUjC,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAkC,SAAXlC,WAAW;IAAAmC,YAFV;EAAM","names":["JwtHelperService","UserService","constructor","http","login","userDetails","post","BackendUrl","getUserById","id","get","isLoggedIn","localStorage","getItem","getAvailableToken","storeToken","tokenValue","setItem","getToken","token","decodedToken","jwtHelper","decodeToken","getUsernameFromToken","userToken","username","name","getAvailableTokenFromToken","localToken","avaiableToken","TokenAvailable","console","log","getUserIdFromToken","UserId","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ayushpal\\Dotnet-Mini-Assignment2\\BookBorrowFrontend\\librarysystem\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  BackendUrl:string=\"http://localhost:5030/api/User\"\n  constructor(private http:HttpClient) { }\n\n  //login\n  login(userDetails:any):Observable<any>{\n    return this.http.post(`${this.BackendUrl}/login`,userDetails);\n  }\n\n  //get user by id\n  getUserById(id:any):Observable<any>{\n    return this.http.get(`${this.BackendUrl}/getUserById/${id}`);\n  }\n  // is logged in or not\n  isLoggedIn(){\n    return !!localStorage.getItem('token');\n  }\n  //get available token\n  getAvailableToken(id:any):Observable<any>{\n    return this.http.get(`${this.BackendUrl}/getAvailableToken/${id}`);\n  }\n\n  //store token\n  storeToken(tokenValue:any){\n    \n    localStorage.setItem('token',tokenValue);\n  }\n\n  //get token\n  getToken(){\n    const token=localStorage.getItem('token');\n    return token;\n  }\n  //decode token\n  decodedToken(){\n    const jwtHelper=new JwtHelperService();\n    const token=this.getToken() ?? '';\n    return jwtHelper.decodeToken(token);\n  }\n  getUsernameFromToken(){\n    const userToken=this.decodedToken();\n    if(userToken){\n      const username=userToken.name;\n      return username;\n    }\n    return \"\";\n  }\n  getAvailableTokenFromToken(localToken:any){\n    const userToken=this.decodedToken();\n    if(userToken){\n      if(localToken){\n        \n      }\n      const avaiableToken=userToken.TokenAvailable;\n      console.log(avaiableToken);\n      return avaiableToken;\n    }\n    return \"\";\n  }\n  getUserIdFromToken(){\n    const userToken=this.decodedToken();\n    if(userToken){\n      return userToken.UserId;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}