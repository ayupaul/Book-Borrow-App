{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport class BookService {\n  constructor(http, userService) {\n    this.http = http;\n    this.userService = userService;\n    this.Backend = \"http://localhost:5030/api/Book\";\n  }\n  //add book\n  addBook(bookDetails) {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.post(`${this.Backend}/addBook/${userId}`, bookDetails);\n  }\n  //get available books\n  getAvailableBooks() {\n    return this.http.get(`${this.Backend}/getAvaiableBooks`);\n  }\n  //get book by id\n  getBookById(id) {\n    return this.http.get(`${this.Backend}/getBookById/${id}`);\n  }\n  //borrow book\n  borrowBook(bookId, userId) {\n    const payload = {\n      userId: userId\n    };\n    return this.http.post(`${this.Backend}/borrow/${bookId}`, payload);\n  }\n  //get book borrowed by user\n  getBorrowedBooks(userId) {\n    return this.http.get(`${this.Backend}/getBookBorrowed/${userId}`);\n  }\n  //get book lent by user\n  getLentBooks(userId) {\n    return this.http.get(`${this.Backend}/getBookLent/${userId}`);\n  }\n  //get all books added by others\n  getAllBooksAddedByOthers(userId) {\n    return this.http.get(`${this.Backend}/getAllBooksAddedByOthers/${userId}`);\n  }\n  //search books\n  searchBooks(word) {\n    return this.http.get(`${this.Backend}/search/${word}`);\n  }\n  static #_ = this.ɵfac = function BookService_Factory(t) {\n    return new (t || BookService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BookService,\n    factory: BookService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,IAAe,EAASC,WAAuB;IAA/C,SAAI,GAAJD,IAAI;IAAoB,gBAAW,GAAXC,WAAW;IADvD,YAAO,GAAQ,gCAAgC;EACwB;EAEvE;EACAC,OAAO,CAACC,WAAe;IACrB,MAAMC,MAAM,GAAC,IAAI,CAACH,WAAW,CAACI,kBAAkB,EAAE;IAClD,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,YAAYH,MAAM,EAAE,EAACD,WAAW,CAAC;EACxE;EAEA;EACAK,iBAAiB;IACf,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,mBAAmB,CAAC;EAC1D;EAEA;EACAG,WAAW,CAACC,EAAM;IAChB,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,gBAAgBI,EAAE,EAAE,CAAC;EAC3D;EACA;EACAC,UAAU,CAACC,MAAU,EAACT,MAAU;IAC9B,MAAMU,OAAO,GAAG;MAAEV,MAAM,EAAEA;IAAM,CAAE;IAClC,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACC,OAAO,WAAWM,MAAM,EAAE,EAACC,OAAO,CAAC;EACnE;EACA;EACAC,gBAAgB,CAACX,MAAU;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,oBAAoBH,MAAM,EAAE,CAAC;EACnE;EACA;EACAY,YAAY,CAACZ,MAAU;IACrB,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,gBAAgBH,MAAM,EAAE,CAAC;EAC/D;EACA;EACAa,wBAAwB,CAACb,MAAU;IACjC,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,6BAA6BH,MAAM,EAAE,CAAC;EAC5E;EAEA;EACAc,WAAW,CAACC,IAAQ;IAClB,OAAO,IAAI,CAACnB,IAAI,CAACS,GAAG,CAAC,GAAG,IAAI,CAACF,OAAO,WAAWY,IAAI,EAAE,CAAC;EACxD;EAAC;qBAxCUrB,WAAW;EAAA;EAAA;WAAXA,WAAW;IAAAsB,SAAXtB,WAAW;IAAAuB,YAFV;EAAM","names":["BookService","constructor","http","userService","addBook","bookDetails","userId","getUserIdFromToken","post","Backend","getAvailableBooks","get","getBookById","id","borrowBook","bookId","payload","getBorrowedBooks","getLentBooks","getAllBooksAddedByOthers","searchBooks","word","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ayushpal\\Dotnet-Mini-Assignment2\\BookBorrowFrontend\\librarysystem\\src\\app\\services\\book.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BookService {\n  Backend:string=\"http://localhost:5030/api/Book\"\n  constructor(private http:HttpClient,private userService:UserService) { }\n\n  //add book\n  addBook(bookDetails:any):Observable<any>{\n    const userId=this.userService.getUserIdFromToken();\n    return this.http.post(`${this.Backend}/addBook/${userId}`,bookDetails);\n  }\n\n  //get available books\n  getAvailableBooks():Observable<any>{\n    return this.http.get(`${this.Backend}/getAvaiableBooks`);\n  }\n\n  //get book by id\n  getBookById(id:any):Observable<any>{\n    return this.http.get(`${this.Backend}/getBookById/${id}`);\n  }\n  //borrow book\n  borrowBook(bookId:any,userId:any):Observable<any>{\n    const payload = { userId: userId }; \n    return this.http.post(`${this.Backend}/borrow/${bookId}`,payload);\n  }\n  //get book borrowed by user\n  getBorrowedBooks(userId:any):Observable<any>{\n    return this.http.get(`${this.Backend}/getBookBorrowed/${userId}`);\n  }\n  //get book lent by user\n  getLentBooks(userId:any):Observable<any>{\n    return this.http.get(`${this.Backend}/getBookLent/${userId}`);\n  }\n  //get all books added by others\n  getAllBooksAddedByOthers(userId:any):Observable<any>{\n    return this.http.get(`${this.Backend}/getAllBooksAddedByOthers/${userId}`);\n  }\n\n  //search books\n  searchBooks(word:any):Observable<any>{\n    return this.http.get(`${this.Backend}/search/${word}`);\n  }\n  //get lented User Id\n  getLentedUserId(bookId:any)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}